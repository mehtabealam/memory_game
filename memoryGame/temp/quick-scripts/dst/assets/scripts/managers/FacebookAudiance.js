
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/managers/FacebookAudiance.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'a7156emC5pEy6IYXQVsNTaS', 'FacebookAudiance');
// scripts/managers/FacebookAudiance.js

"use strict";

var LIVE_STATUS = {
  UNKNOWN: 0,
  INITIALIZING: 1,
  RUNNING: 2,
  PAUSED: 3,
  STOPPED: 4,
  COMPLETED: 5
};
var PLACEMENT_IDS = {
  ANDROID: {
    BANNER: "854006105330177_900427447354709",
    INTERSTITIAL: '854006105330177_898749927522461',
    REWARDEDVIDEO: 'YOUR_PLACEMENT_ID'
  },
  IOS: {
    BANNER: "IMG_16_9_APP_INSTALL#YOUR_PLACEMENT_ID",
    INTERSTITIAL: 'IMG_16_9_APP_INSTALL#YOUR_PLACEMENT_ID',
    REWARDEDVIDEO: 'YOUR_PLACEMENT_ID'
  }
};
cc.Class({
  "extends": cc.Component,
  onLoad: function onLoad() {
    //skip ads on browsers
    if (cc.sys.isBrowser) return;
    this.placementId = PLACEMENT_IDS.ANDROID;
    cc.log("platform is ", cc.sys.platform, cc.sys.IPAD);

    if (cc.sys.platform === cc.sys.IPHONE || cc.sys.platform === cc.sys.IPAD) {
      this.placementId = PLACEMENT_IDS.IOS;
    }

    this.schedule(this.loadInterstitial, 5, cc.macro.REPEAT_FOREVER, 0);
  },
  showBanner: function showBanner(event) {
    //skip ads on browsers
    if (cc.sys.isBrowser) return;
    var banner = new cc.Ads.Banner(this.placementId.BANNER, cc.Ads.BANNER_POSITION.ALIGN_PARENT_BOTTOM);
    this.banner = banner;
    banner.on("onAdLoaded", function () {
      cc.log("banner onAdLoaded");
    }, this.node);
    banner.on("onError", function (eCode) {
      console.log("banner onError", eCode);
    }, this.node);
    banner.on("onAdClicked", function () {
      cc.log("banner onAdClicked");
    }, this.node);
    banner.show().then(function () {
      cc.log("banner show-------");
    })["catch"](function (e) {
      cc.log("banner reject ", e);
    });
  },
  destryBanner: function destryBanner() {
    this.banner.destroy();
  },
  loadInterstitial: function loadInterstitial() {
    var _this = this;

    this.interstital = new cc.Ads.Interstitial(this.placementId.INTERSTITIAL);
    this.interstital.on("onInterstitialDisplayed", function () {
      cc.log("interstital onInterstitialDisplayed");
    });
    this.interstital.on("onInterstitialDismissed", function () {
      cc.log("interstital onInterstitialDismissed");
    });
    this.interstital.on("onAdClicked", function () {
      cc.log("interstital onAdClicked");
    });
    this.interstital.on("onError", function (error) {
      console.log("interstital Error:", error);
    });
    this.interstital.loadAd().then(function () {
      _this.isInterstitialLoaded = true;
    })["catch"](function (e) {
      cc.log("interstital catch", e);
    });
  },
  showInterstital: function showInterstital() {
    //skip ads on browsers
    if (cc.sys.isBrowser) return;

    if (this.isInterstitialLoaded) {
      this.interstital.show();
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL21hbmFnZXJzL0ZhY2Vib29rQXVkaWFuY2UuanMiXSwibmFtZXMiOlsiTElWRV9TVEFUVVMiLCJVTktOT1dOIiwiSU5JVElBTElaSU5HIiwiUlVOTklORyIsIlBBVVNFRCIsIlNUT1BQRUQiLCJDT01QTEVURUQiLCJQTEFDRU1FTlRfSURTIiwiQU5EUk9JRCIsIkJBTk5FUiIsIklOVEVSU1RJVElBTCIsIlJFV0FSREVEVklERU8iLCJJT1MiLCJjYyIsIkNsYXNzIiwiQ29tcG9uZW50Iiwib25Mb2FkIiwic3lzIiwiaXNCcm93c2VyIiwicGxhY2VtZW50SWQiLCJsb2ciLCJwbGF0Zm9ybSIsIklQQUQiLCJJUEhPTkUiLCJzY2hlZHVsZSIsImxvYWRJbnRlcnN0aXRpYWwiLCJtYWNybyIsIlJFUEVBVF9GT1JFVkVSIiwic2hvd0Jhbm5lciIsImV2ZW50IiwiYmFubmVyIiwiQWRzIiwiQmFubmVyIiwiQkFOTkVSX1BPU0lUSU9OIiwiQUxJR05fUEFSRU5UX0JPVFRPTSIsIm9uIiwibm9kZSIsImVDb2RlIiwiY29uc29sZSIsInNob3ciLCJ0aGVuIiwiZSIsImRlc3RyeUJhbm5lciIsImRlc3Ryb3kiLCJpbnRlcnN0aXRhbCIsIkludGVyc3RpdGlhbCIsImVycm9yIiwibG9hZEFkIiwiaXNJbnRlcnN0aXRpYWxMb2FkZWQiLCJzaG93SW50ZXJzdGl0YWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsV0FBVyxHQUFHO0FBQ2RDLEVBQUFBLE9BQU8sRUFBRSxDQURLO0FBRWRDLEVBQUFBLFlBQVksRUFBRSxDQUZBO0FBR2RDLEVBQUFBLE9BQU8sRUFBRSxDQUhLO0FBSWRDLEVBQUFBLE1BQU0sRUFBRSxDQUpNO0FBS2RDLEVBQUFBLE9BQU8sRUFBRSxDQUxLO0FBTWRDLEVBQUFBLFNBQVMsRUFBRTtBQU5HLENBQWxCO0FBU0EsSUFBSUMsYUFBYSxHQUFHO0FBQ2hCQyxFQUFBQSxPQUFPLEVBQUU7QUFDTEMs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S2tDLFdBQUwsQ0FBaUJULEVBQWpCLENBQW9CLHlCQUFwQixFQUErQyxZQUFNO0FBQ2pEdEIsTUFBQUEsRUFBRSxDQUFDTyxHQUFILENBQU8scUNBQVA7QUFDSCxLQUZEO0FBSUEsU0FBS3dCLFdBQUwsQ0FBaUJULEVBQWpCLENBQW9CLHlCQUFwQixFQUErQyxZQUFNO0FBQ2pEdEIsTUFBQUEsRUFBRSxDQUFDTyxHQUFILENBQU8scUNBQVA7QUFDSCxLQUZEO0FBSUEsU0FBS3dCLFdBQUwsQ0FBaUJULEVBQWpCLENBQW9CLGFBQXBCLEVBQW1DLFlBQU07QUFDckN0QixNQUFBQSxFQUFFLENBQUNPLEdBQUgsQ0FBTyx5QkFBUDtBQUNILEtBRkQ7QUFJQSxTQUFLd0IsV0FBTCxDQUFpQlQsRUFBakIsQ0FBb0IsU0FBcEIsRUFBOEIsVUFBQ1csS0FBRCxFQUFTO0FBQ25DUixNQUFBQSxPQUFPLENBQUNsQixHQUFSLENBQVksb0JBQVosRUFBaUMwQixLQUFqQztBQUNILEtBRkQ7QUFJQSxTQUFLRixXQUFMLENBQWlCRyxNQUFqQixHQUEwQlAsSUFBMUIsQ0FBK0IsWUFBTTtBQUNqQyxNQUFBLEtBQUksQ0FBQ1Esb0JBQUwsR0FBNEIsSUFBNUI7QUFDSCxLQUZELFdBRVMsVUFBQ1AsQ0FBRCxFQUFPO0FBQ1o1QixNQUFBQSxFQUFFLENBQUNPLEdBQUgsQ0FBTyxtQkFBUCxFQUE0QnFCLENBQTVCO0FBQ0gsS0FKRDtBQUtILEdBckVJO0FBdUVMUSxFQUFBQSxlQXZFSyw2QkF1RVk7QUFDYjtBQUNBLFFBQUdwQyxFQUFFLENBQUNJLEdBQUgsQ0FBT0MsU0FBVixFQUNJOztBQUNKLFFBQUcsS0FBSzhCLG9CQUFSLEVBQTZCO0FBQ3pCLFdBQUtKLFdBQUwsQ0FBaUJMLElBQWpCO0FBQ0g7QUFDSjtBQTlFSSxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgTElWRV9TVEFUVVMgPSB7XG4gICAgVU5LTk9XTjogMCxcbiAgICBJTklUSUFMSVpJTkc6IDEsXG4gICAgUlVOTklORzogMixcbiAgICBQQVVTRUQ6IDMsXG4gICAgU1RPUFBFRDogNCxcbiAgICBDT01QTEVURUQ6IDUsXG59O1xuXG5sZXQgUExBQ0VNRU5UX0lEUyA9IHtcbiAgICBBTkRST0lEOiB7XG4gICAgICAgIEJBTk5FUjogXCI4NTQwMDYxMDUzMzAxNzdfOTAwNDI3NDQ3MzU0NzA5XCIsXG4gICAgICAgIElOVEVSU1RJVElBTDogJzg1NDAwNjEwNTMzMDE3N184OTg3NDk5Mjc1MjI0NjEnLFxuICAgICAgICBSRVdBUkRFRFZJREVPOiAnWU9VUl9QTEFDRU1FTlRfSUQnXG4gICAgfSxcbiAgICBJT1M6IHtcbiAgICAgICAgQkFOTkVSOiBcIklNR18xNl85X0FQUF9JTlNUQUxMI1lPVVJfUExBQ0VNRU5UX0lEXCIsXG4gICAgICAgIElOVEVSU1RJVElBTDogJ0lNR18xNl85X0FQUF9JTlNUQUxMI1lPVVJfUExBQ0VNRU5UX0lEJyxcbiAgICAgICAgUkVXQVJERURWSURFTzogJ1lPVVJfUExBQ0VNRU5UX0lEJ1xuICAgIH1cbn07XG5jYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuICAgIG9uTG9hZCAoKSB7XG4gICAgICAgIC8vc2tpcCBhZHMgb24gYnJvd3NlcnNcbiAgICAgICAgaWYoY2Muc3lzLmlzQnJvd3NlcilcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB0aGlzLnBsYWNlbWVudElkID0gUExBQ0VNRU5UX0lEUy5BTkRST0lEO1xuXG4gICAgICAgIGNjLmxvZyhcInBsYXRmb3JtIGlzIFwiLGNjLnN5cy5wbGF0Zm9ybSxjYy5zeXMuSVBBRCk7XG4gICAgICAgIGlmIChjYy5zeXMucGxhdGZvcm0gPT09IGNjLnN5cy5JUEhPTkUgfHwgY2Muc3lzLnBsYXRmb3JtID09PSBjYy5zeXMuSVBBRCkge1xuICAgICAgICAgICAgdGhpcy5wbGFjZW1lbnRJZCA9IFBMQUNFTUVOVF9JRFMuSU9TO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2NoZWR1bGUodGhpcy5sb2FkSW50ZXJzdGl0aWFsLCA1LCBjYy5tYWNyby5SRVBFQVRfRk9SRVZFUiwgMCk7XG4gICAgfSxcblxuICAgIHNob3dCYW5uZXIoZXZlbnQpe1xuICAgICAgICAvL3NraXAgYWRzIG9uIGJyb3dzZXJzXG4gICAgICAgIGlmKGNjLnN5cy5pc0Jyb3dzZXIpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgbGV0IGJhbm5lciA9IG5ldyBjYy5BZHMuQmFubmVyKHRoaXMucGxhY2VtZW50SWQuQkFOTkVSLGNjLkFkcy5CQU5ORVJfUE9TSVRJT04uQUxJR05fUEFSRU5UX0JPVFRPTSk7XG4gICAgICAgIHRoaXMuYmFubmVyID0gYmFubmVyO1xuICAgICAgICBiYW5uZXIub24oXCJvbkFkTG9hZGVkXCIsICgpID0+IHtcbiAgICAgICAgICAgIGNjLmxvZyhcImJhbm5lciBvbkFkTG9hZGVkXCIpO1xuICAgICAgICB9LCB0aGlzLm5vZGUpO1xuXG4gICAgICAgIGJhbm5lci5vbihcIm9uRXJyb3JcIiwgKGVDb2RlKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImJhbm5lciBvbkVycm9yXCIsIGVDb2RlKTtcbiAgICAgICAgfSwgdGhpcy5ub2RlKTtcblxuICAgICAgICBiYW5uZXIub24oXCJvbkFkQ2xpY2tlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBjYy5sb2coXCJiYW5uZXIgb25BZENsaWNrZWRcIik7XG4gICAgICAgIH0sIHRoaXMubm9kZSk7XG5cbiAgICAgICAgYmFubmVyLnNob3coKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGNjLmxvZyhcImJhbm5lciBzaG93LS0tLS0tLVwiKTtcbiAgICAgICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgIGNjLmxvZyhcImJhbm5lciByZWplY3QgXCIsIGUpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgZGVzdHJ5QmFubmVyKCl7XG4gICAgICAgIHRoaXMuYmFubmVyLmRlc3Ryb3koKTtcbiAgICB9LFxuXG4gICAgbG9hZEludGVyc3RpdGlhbCgpe1xuICAgICAgICB0aGlzLmludGVyc3RpdGFsID0gbmV3IGNjLkFkcy5JbnRlcnN0aXRpYWwodGhpcy5wbGFjZW1lbnRJZC5JTlRFUlNUSVRJQUwpO1xuICAgICAgICB0aGlzLmludGVyc3RpdGFsLm9uKFwib25JbnRlcnN0aXRpYWxEaXNwbGF5ZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgY2MubG9nKFwiaW50ZXJzdGl0YWwgb25JbnRlcnN0aXRpYWxEaXNwbGF5ZWRcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaW50ZXJzdGl0YWwub24oXCJvbkludGVyc3RpdGlhbERpc21pc3NlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBjYy5sb2coXCJpbnRlcnN0aXRhbCBvbkludGVyc3RpdGlhbERpc21pc3NlZFwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5pbnRlcnN0aXRhbC5vbihcIm9uQWRDbGlja2VkXCIsICgpID0+IHtcbiAgICAgICAgICAgIGNjLmxvZyhcImludGVyc3RpdGFsIG9uQWRDbGlja2VkXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmludGVyc3RpdGFsLm9uKFwib25FcnJvclwiLChlcnJvcik9PntcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaW50ZXJzdGl0YWwgRXJyb3I6XCIsZXJyb3IpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmludGVyc3RpdGFsLmxvYWRBZCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pc0ludGVyc3RpdGlhbExvYWRlZCA9IHRydWU7XG4gICAgICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICBjYy5sb2coXCJpbnRlcnN0aXRhbCBjYXRjaFwiLCBlKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIHNob3dJbnRlcnN0aXRhbCgpe1xuICAgICAgICAvL3NraXAgYWRzIG9uIGJyb3dzZXJzXG4gICAgICAgIGlmKGNjLnN5cy5pc0Jyb3dzZXIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmKHRoaXMuaXNJbnRlcnN0aXRpYWxMb2FkZWQpeyAgICAgXG4gICAgICAgICAgICB0aGlzLmludGVyc3RpdGFsLnNob3coKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuIl19