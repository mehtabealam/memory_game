{"version":3,"sources":["assets/scripts/managers/GameManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { GAME_MODE} from \"../helper/constants\";\n\n export class GameManager{\n    private static  _instance = null;\n    private _gameConfig = null;\n    private _levelsData = null;\n    private _levelImages = null;\n    private _currentSelectLanguage = \"EN\"; \n    private _languageData = null;\n    private _selectedMode = GAME_MODE.PRACTICE;\n    private _currentLevel = 0;\n    private _currentDate = null;\n\n    public screen = [];\n\n    static getInstance(){\n        if(!GameManager._instance){\n           GameManager. _instance = new GameManager();\n        }\n        return GameManager._instance;\n    }\n\n    setCurrentDate(date){\n        this._currentDate = date;\n    }\n\n    getCurrentDate(){\n        return this._currentDate;\n    }\n\n    loadGameConfig() {\n        var target = this;\n        return new Promise((resolve,reject)=> {\n            if(target._gameConfig) {\n                resolve(target._gameConfig);\n            }else {\n                cc.resources.load(\"GameMode/gameConfig\", function(error, level) {\n                    if(error){\n                        console.log(\"error while loading json\");\n                        reject(error)\n                    }else {\n                        target._gameConfig        =   level[\"json\"];\n                        // console.log(\"data loadded\", target._gameConfig);\n                        resolve(target._gameConfig);\n                    }\n                })\n            }\n        });\n    }\n\n\n    loadLevels (){\n        var target = this;\n        return new Promise((resolve,reject)=> {\n            if(target._levelsData) {\n                resolve(target._levelsData);\n            }else {\n                cc.resources.load(\"Levels/levels\", function(error, level) {\n                    if(error){\n                        console.log(\"error while loading json\");\n                        reject(error)\n                    }else {\n                        target._levelsData        =   level[\"json\"];\n                        // console.log(\"data loadded\", target._levelsData);\n                        resolve(target._levelsData);\n                    }\n                })\n            }\n        });\n    }\n\n\n    loadLanaguge(){\n        return new Promise((resolve, reject) => {\n            if (this._languageData) {\n                resolve(this._languageData);\n            } else {\n                cc.loader.loadResDir(\"Languages\" , cc.JsonAsset, (err: Error, data: any) => {\n                    if (err) {\n                        reject(err);\n                        cc.error(\"langauge data error :\" + err);\n                    }else{\n                        this._languageData = data;\n                        // console.log(\"langauge data\", this._languageData);\n                    }\n                    resolve(data);\n                });\n            }\n        });\n    }\n\n    // data is in form  ,this._levelImages = {level [images]}\n    loadLevelImages( levelNo): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (this._levelImages && this._levelImages.mode && this._levelImages.mode.level[levelNo]) {\n                resolve(this._levelImages.level[levelNo]);\n            } else {\n                cc.loader.loadResDir(`Levels/Images/LEVEL${levelNo + 1}` , cc.SpriteFrame, (err: Error, data: any) => {\n                    if (err) {\n                        reject(err);\n                        cc.error(\"loadLevelImages :\" + err);\n                    }else{\n                        if(!this._levelImages){\n                            this._levelImages = {};\n                            this._levelImages.level = [];\n                        }\n                    \n                            this._levelImages.level[levelNo] = data;\n                        \n                        // console.log(\"level images\", this._levelImages, data);\n                    }\n                    resolve(this._levelImages.level[levelNo]);\n                });\n            }\n        });\n    }\n\n    getSpriteFrame(mode, levelNo, name) {\n        if(this._levelImages){\n            let images = this._levelImages.level[levelNo];\n            // console.log(\"images\",images );\n            const spriteFrame = images.find(item => item.name == name);\n            // console.log(\"spriteFrames\",spriteFrame, name );\n            return spriteFrame;\n        }\n        \n\n    }\n\n    public getGameConfiguration(){\n        if(this._gameConfig){  \n            return this._gameConfig;\n        }\n    }\n\n    public getModesInfo () {\n        if(this._gameConfig){\n            return this._gameConfig[\"gameMode\"];\n        }\n\n    }\n\n    getModeInfo (modeName) {\n        if(this._gameConfig){\n            return this._gameConfig[\"gameMode\"].find(mode => mode.key == modeName);\n        }\n\n    }\n\n    getLevelInfo(){\n        if(this._levelsData){\n            return this._levelsData[\"levels\"];\n        }\n    }\n\n    getLevelData(levelNo: number){\n        if(this._levelsData){\n            return this._levelsData[\"levels\"][levelNo];\n        }\n\n    }\n\n    isImagesLoaded () :boolean {\n        return this._levelsData? true : false;\n    }\n\n    getString(key:string): string {\n        if(this._languageData){\n            let language = this._languageData.find(item => item.name == this._currentSelectLanguage);\n            // console.log(\"key\", key, language);\n            return language.json[key];\n        }else{\n            return \"\";\n        }\n    }\n\n    changeCurrentLanguage(){\n       \n        this._currentSelectLanguage = cc.sys.localStorage.getItem(\"Language\");\n        console.log(\"change current Language\", this._currentSelectLanguage);\n\n    }\n\n    setGameMode(mode){\n        this._selectedMode  = mode;\n    }\n    \n    getSelectedMode(){\n        return  this._selectedMode;\n    }\n\n    setCurrentLevel(level){\n     this._currentLevel = level;\n    }\n\n    getCurrentLevel(){\n        return this._currentLevel;\n    }\n\n    pushScene(scene){\n         console.log(\"scnee\", scene);\n         this.screen.push(scene);\n     }\n\n    popScene(){\n        return this.screen.pop();\n     }\n\n    removeAllScene(){\n         this.screen.length = 0;\n     }\n}"]}